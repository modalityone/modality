# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven
#
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build and Deploy to AWS

on:
  push:
    branches: [ "main" ]
  pull_request_target:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    env:
      jdk-version: '19'

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 19
      - name: Build with Maven
        run: mvn package -B -P 'vertx-fatjar,gwt-compile'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Retrieve DB endpoint and password
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            MODALITY_DATABASE_HOST, modality-demo-db-fqdn
            MODALITY_DATABASE_PASSWORD, modality-demo-db-randompass
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          FAT_JAR: "modality-all/modality-all-server-application-vertx/target/modality-all-server-application-vertx-1.0.0-SNAPSHOT-fat.jar"
          BACK_OFFICE_WAR: "modality-all/modality-all-backoffice-application-gwt/target/modality-all-backoffice-application-gwt-1.0.0-SNAPSHOT.war"
          FRONT_OFFICE_WAR: "modality-all/modality-all-frontoffice-application-gwt/target/modality-all-frontoffice-application-gwt-1.0.0-SNAPSHOT.war"
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.MODALITY_REPOSITORY }}
          ECR_ACCOUNT_ID: ${{ vars.ECR_ACCOUNT_ID }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
          ECS_SERVICE: ${{ vars.ECS_SERVICE }}
          MODALITY_DATABASE_HOST: ${{ env.MODALITY_DATABASE_HOST }}
          MODALITY_DATABASE_PORT: ${{ secrets.MODALITY_DATABASE_PORT }}
          MODALITY_DATABASE_NAME: ${{ secrets.MODALITY_DATABASE_NAME }}
          MODALITY_DATABASE_USERNAME: ${{ secrets.MODALITY_DATABASE_USERNAME }}
          MODALITY_DATABASE_PASSWORD: ${{ env.MODALITY_DATABASE_PASSWORD }}
          IMAGE_TAG: ${{ github.sha }}
          DOCKER_CONF_DIR: ".github/workflows/docker"
        run: |
          cp $FAT_JAR $DOCKER_CONF_DIR
          cp $BACK_OFFICE_WAR $DOCKER_CONF_DIR
          cp $FRONT_OFFICE_WAR $DOCKER_CONF_DIR
          cd $DOCKER_CONF_DIR
          sed -i "s/__ECR_ACCOUNT_ID__/${ECR_ACCOUNT_ID}/g" Dockerfile
          sed -i "s/__AWS_REGION__/${AWS_REGION}/g" Dockerfile
          sed -i "s/__MODALITY_DATABASE_HOST__/${MODALITY_DATABASE_HOST}/g" ModalityDatabase.json
          sed -i "s/__MODALITY_DATABASE_PORT__/${MODALITY_DATABASE_PORT}/g" ModalityDatabase.json
          sed -i "s/__MODALITY_DATABASE_NAME__/${MODALITY_DATABASE_NAME}/g" ModalityDatabase.json
          sed -i "s/__MODALITY_DATABASE_USERNAME__/${MODALITY_DATABASE_USERNAME}/g" ModalityDatabase.json
          sed -i "s/__MODALITY_DATABASE_PASSWORD__/${MODALITY_DATABASE_PASSWORD}/g" ModalityDatabase.json
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY
          docker tag  $ECR_REGISTRY/$ECR_REPOSITORY $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          CLUSTER_STATUS=`aws ecs describe-clusters --clusters ${ECS_CLUSTER} | grep -q ACTIVE`
          if [ "${CLUSTER_STATUS}" == "" ]; then
            echo "The DEMO environment seems not to be running. So not refreshing the application services."
          else
            aws ecs update-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --force-new-deployment
          fi
      - name: Upload database seed to S3
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          DB_PRISTINE_PATH: "modality-base/modality-base-server-datasource/src/main/resources/db-pristine"
          DIFF_PATH: ".github/workflows/database-diffs"
        run: |
          patch ${DB_PRISTINE_PATH}/V0001__base.sql ${DIFF_PATH}/V0001__base.diff
          patch ${DB_PRISTINE_PATH}/V0009__country.sql ${DIFF_PATH}/V0009__country.diff
          patch ${DB_PRISTINE_PATH}/V0010__language.sql ${DIFF_PATH}/V0010__language.diff
          patch ${DB_PRISTINE_PATH}/V0011__item_family.sql ${DIFF_PATH}/V0011__item_family.diff
          patch ${DB_PRISTINE_PATH}/V0012__label.sql ${DIFF_PATH}/V0012__label.diff
          patch ${DB_PRISTINE_PATH}/V0014__method.sql ${DIFF_PATH}/V0014__method.diff
          cd ${DB_PRISTINE_PATH}
          zip modality-database-seed.zip *.sql
          aws s3 cp modality-database-seed.zip s3://modality-database-seed/
